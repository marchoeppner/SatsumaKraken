params {

	outdir = "results"

}

manifest {
	version = "1.0"
	description = "Satsuma Pipeline"
	author = "Marc P. Hoeppner"
	homePage = "https://github.com/marchoeppner/SatsumaKraken"
	nextflowVersion = "20.01.0"
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
        enabled = true
        file = "${params.outdir}/pipeline_info/satsuma_timeline.html"
}
report {
        enabled = true
        file = "${params.outdir}/pipeline_info/satsuma-pipeline_report.html"
}
trace {
        enabled = true
        file = "${params.outdir}/pipeline_info/satsuma-pipeline_trace.txt"
}
dag {
        enabled = true
        file = "${params.outdir}/pipeline_info/satsuma-pipeline_dag.svg"
}

process.container = 'marchoeppner/satsuma2:1.0'

profiles {
	standard {
		includeConfig 'conf/base.config'
		includeConfig 'conf/ccga.config'
	}
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 250.GB
  max_cpus = 24
  max_time = 240.h

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
